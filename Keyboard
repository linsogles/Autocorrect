package program1;

public class Keyboard {
    
    //Find characters close to a given character on the keyboard.
    public static String getCharsToCheck(char input)
    {
        String output = ""; //Initialize output string.
        //Cases for alphanumerical characters.
        if (input == 'q') //character input
            output = "wa"; //characters near input character on keyboard
        if (input == 'w')
            output = "qse";
        if (input == 'e')
            output = "rdw";
        if (input == 'r')
            output = "eft";
        if (input =='t')
            output = "ygr";
        if (input == 'y')
            output = "thu";
        if (input == 'u')
            output = "yji";
        if (input == 'i')
            output = "uko";
        if (input == 'o')
            output = "ilp";
        if (input == 'p')
            output = "ol";
        if (input == 'a')
            output = "qsz";
        if (input == 's')
            output = "wdaxz";
        if (input == 'd')
            output = "esfcx";
        if (input == 'f')
            output = "rgvdc";
        if (input == 'g')
            output = "thfbv";
        if (input == 'h')
            output = "ygjbn";
        if (input == 'j')
            output = "hkmnu";
        if (input == 'k')
            output = "jilm";
        if (input == 'l')
            output = "kop";
        if (input == 'z')
            output = "asx";
        if (input == 'x')
            output = "zcsd";
        if (input == 'c')
            output = "xdfv";
        if (input == 'v')
            output = "xvdf";
        if (input == 'b')
            output = "vngh";
        if (input == 'n')
            output = "bmhj";
        if (input == 'm')
            output = "nkj";
        //empty output for non-alphanumeric characters, just in case
        else
            output = "";
        
        return output;
    }
    
    public static boolean possibleReplacement(char inputChar, char dictChar)
    {
        String possibleReplacements = getCharsToCheck(inputChar);
        
        for (int i=0; i < possibleReplacements.length()-1; i++)
        {
            if (dictChar == possibleReplacements.charAt(i)) //Take two input characters. Determine if possible replacements string, as dictated by input char 1, contains input char 2.
                System.out.println("Possible replacement found."); //debug
                return true;
        }
        return false;
        
        
    }
    
    public static boolean checkTwoWords(String word1, String word2) {
        
        int difs = 0; //start with 0 recorded differences
        
        for (int i=0; i < word1.length()-1; i++) //for entirety of word 1
        {

            if (word1.charAt(i) == word2.charAt(i)) //if character at index n is identical btwn words
            {
                difs += 0; //do not add a difference
            }
            else if (possibleReplacement(word1.charAt(i), word2.charAt(i)) == true) //if character at index n is a possible replacement
            {
                difs++; //add a difference
            }
            else //if character is not a possible replacement or identical btwn words
            {
                return false; //return false, words are not a match
            }
            
            if (difs > 1) //if there is more than 1 difference
            {
                return false; //return false, words are not a match
            }
                
	}
        System.out.print("Word is a match."); //debug
        return true;
    }
     
}
